(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([t.id,'* {\n\tfont-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;\n\tbox-sizing: border-box;\n}\n\nbody {\n\tbackground-color: #181818;\n\tcolor: white;\n\tmargin: 0;\n}\n\n.Title {\n\ttext-align: center;\n\tmargin: 2.5vh 0;\n}\n\n.TitleText {\n\tfont-size: 5vw;\n\tcolor: white;\n\tmargin: 0;\n}\n\n.gameboards {\n\tposition: relative;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tpadding: 2vh;\n\tgap: 5vw;\n\tjustify-content: center;\n}\n\n.gameboard.playerBoard {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 25vw;\n\theight: 25vw;\n\tborder: 0.25vw solid rgb(2, 2, 112);\n\tborder-bottom: 0.3vw solid rgb(2, 2, 112);\n\tposition: relative;\n}\n\n.gameboard.cpuBoard {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 25vw;\n\theight: 25vw;\n\tborder: 0.25vw solid rgb(112, 2, 2);\n\tborder-bottom: 0.3vw solid rgb(112, 2, 2);\n\tposition: relative;\n}\n\n.gameboard .row {\n\tdisplay: flex;\n\theight: 4vw;\n}\n\n.square {\n\twidth: 10%;\n\tbackground-color: #3a3a3a;\n\tborder: 0.1vw solid #202020;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 1.5vw;\n}\n\n.shipsRemaining {\n\ttext-align: center;\n\tmargin-top: 5vh;\n}\n\n.playerShips,\n.cpuShips {\n\tfont-size: 2vw;\n\tmargin: 2vh 0;\n}\n\n.fa {\n\tcolor: white;\n\ttransition: transform 0.3s ease-in-out;\n}\n\n.fa:hover {\n\ttransform: rotate(360deg) scale(1.2);\n}\n\n.footer {\n\tbottom: 0;\n\tleft: 0;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 1vw;\n\twidth: 100%;\n\theight: 10vh;\n\tfont-size: 1.5vw;\n\tcolor: white;\n}\n\n.legend {\n\tposition: absolute;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: white;\n}\n\n.legend-bottom {\n\tleft: 0;\n\tright: 0;\n\tdisplay: flex;\n\tflex-direction: row;\n\tgap: 1.9vw;\n\tmargin-left: 1vw;\n}\n\n.legend-number {\n\twidth: 10%;\n\theight: 100%;\n}\n\n.legend-left {\n\tmargin-left: -1vw;\n\tmargin-top: 1vw;\n\tposition: fixed;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1.325vw;\n}\n\n.legend-right {\n\tmargin-left: -1vw;\n\tmargin-top: 1vw;\n\tposition: fixed;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1.325vw;\n}\n\nspan {\n\tcolor: #6d6d6d;\n\tfont-size: 1vw;\n}\n\n.ship {\n\tborder: white 0.1vw solid;\n\tfont-weight: bold;\n}\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;CACC,sEAAsE;CACtE,sBAAsB;AACvB;;AAEA;CACC,yBAAyB;CACzB,YAAY;CACZ,SAAS;AACV;;AAEA;CACC,kBAAkB;CAClB,eAAe;AAChB;;AAEA;CACC,cAAc;CACd,YAAY;CACZ,SAAS;AACV;;AAEA;CACC,kBAAkB;CAClB,aAAa;CACb,eAAe;CACf,YAAY;CACZ,QAAQ;CACR,uBAAuB;AACxB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,YAAY;CACZ,mCAAmC;CACnC,yCAAyC;CACzC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,WAAW;CACX,YAAY;CACZ,mCAAmC;CACnC,yCAAyC;CACzC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,WAAW;AACZ;;AAEA;CACC,UAAU;CACV,yBAAyB;CACzB,2BAA2B;CAC3B,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,gBAAgB;AACjB;;AAEA;CACC,kBAAkB;CAClB,eAAe;AAChB;;AAEA;;CAEC,cAAc;CACd,aAAa;AACd;;AAEA;CACC,YAAY;CACZ,sCAAsC;AACvC;;AAEA;CACC,oCAAoC;AACrC;;AAEA;CACC,SAAS;CACT,OAAO;CACP,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;CACR,WAAW;CACX,YAAY;CACZ,gBAAgB;CAChB,YAAY;AACb;;AAEA;CACC,kBAAkB;CAClB,aAAa;CACb,sBAAsB;CACtB,mBAAmB;CACnB,uBAAuB;CACvB,YAAY;AACb;;AAEA;CACC,OAAO;CACP,QAAQ;CACR,aAAa;CACb,mBAAmB;CACnB,UAAU;CACV,gBAAgB;AACjB;;AAEA;CACC,UAAU;CACV,YAAY;AACb;;AAEA;CACC,iBAAiB;CACjB,eAAe;CACf,eAAe;CACf,aAAa;CACb,sBAAsB;CACtB,YAAY;AACb;;AAEA;CACC,iBAAiB;CACjB,eAAe;CACf,eAAe;CACf,aAAa;CACb,sBAAsB;CACtB,YAAY;AACb;;AAEA;CACC,cAAc;CACd,cAAc;AACf;;AAEA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:['* {\n\tfont-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;\n\tbox-sizing: border-box;\n}\n\nbody {\n\tbackground-color: #181818;\n\tcolor: white;\n\tmargin: 0;\n}\n\n.Title {\n\ttext-align: center;\n\tmargin: 2.5vh 0;\n}\n\n.TitleText {\n\tfont-size: 5vw;\n\tcolor: white;\n\tmargin: 0;\n}\n\n.gameboards {\n\tposition: relative;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tpadding: 2vh;\n\tgap: 5vw;\n\tjustify-content: center;\n}\n\n.gameboard.playerBoard {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 25vw;\n\theight: 25vw;\n\tborder: 0.25vw solid rgb(2, 2, 112);\n\tborder-bottom: 0.3vw solid rgb(2, 2, 112);\n\tposition: relative;\n}\n\n.gameboard.cpuBoard {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 25vw;\n\theight: 25vw;\n\tborder: 0.25vw solid rgb(112, 2, 2);\n\tborder-bottom: 0.3vw solid rgb(112, 2, 2);\n\tposition: relative;\n}\n\n.gameboard .row {\n\tdisplay: flex;\n\theight: 4vw;\n}\n\n.square {\n\twidth: 10%;\n\tbackground-color: #3a3a3a;\n\tborder: 0.1vw solid #202020;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 1.5vw;\n}\n\n.shipsRemaining {\n\ttext-align: center;\n\tmargin-top: 5vh;\n}\n\n.playerShips,\n.cpuShips {\n\tfont-size: 2vw;\n\tmargin: 2vh 0;\n}\n\n.fa {\n\tcolor: white;\n\ttransition: transform 0.3s ease-in-out;\n}\n\n.fa:hover {\n\ttransform: rotate(360deg) scale(1.2);\n}\n\n.footer {\n\tbottom: 0;\n\tleft: 0;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 1vw;\n\twidth: 100%;\n\theight: 10vh;\n\tfont-size: 1.5vw;\n\tcolor: white;\n}\n\n.legend {\n\tposition: absolute;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: white;\n}\n\n.legend-bottom {\n\tleft: 0;\n\tright: 0;\n\tdisplay: flex;\n\tflex-direction: row;\n\tgap: 1.9vw;\n\tmargin-left: 1vw;\n}\n\n.legend-number {\n\twidth: 10%;\n\theight: 100%;\n}\n\n.legend-left {\n\tmargin-left: -1vw;\n\tmargin-top: 1vw;\n\tposition: fixed;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1.325vw;\n}\n\n.legend-right {\n\tmargin-left: -1vw;\n\tmargin-top: 1vw;\n\tposition: fixed;\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1.325vw;\n}\n\nspan {\n\tcolor: #6d6d6d;\n\tfont-size: 1vw;\n}\n\n.ship {\n\tborder: white 0.1vw solid;\n\tfont-weight: bold;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var A=[].concat(t[c]);o&&s[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},187:t=>{var e,n="object"==typeof Reflect?Reflect:null,o=n&&"function"==typeof n.apply?n.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};e=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var r=Number.isNaN||function(t){return t!=t};function i(){i.init.call(this)}t.exports=i,t.exports.once=function(t,e){return new Promise((function(n,o){function r(n){t.removeListener(e,i),o(n)}function i(){"function"==typeof t.removeListener&&t.removeListener("error",r),n([].slice.call(arguments))}f(t,e,i,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&f(t,"error",e,{once:!0})}(t,r)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var s=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function l(t){return void 0===t._maxListeners?i.defaultMaxListeners:t._maxListeners}function c(t,e,n,o){var r,i,s,c;if(a(n),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),i=t._events),s=i[e]),void 0===s)s=i[e]=n,++t._eventsCount;else if("function"==typeof s?s=i[e]=o?[n,s]:[s,n]:o?s.unshift(n):s.push(n),(r=l(t))>0&&s.length>r&&!s.warned){s.warned=!0;var A=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");A.name="MaxListenersExceededWarning",A.emitter=t,A.type=e,A.count=s.length,c=A,console&&console.warn&&console.warn(c)}return t}function A(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function u(t,e,n){var o={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},r=A.bind(o);return r.listener=n,o.wrapFn=r,r}function h(t,e,n){var o=t._events;if(void 0===o)return[];var r=o[e];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(r):d(r,r.length)}function p(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(t,e){for(var n=new Array(e),o=0;o<e;++o)n[o]=t[o];return n}function f(t,e,n,o){if("function"==typeof t.on)o.once?t.once(e,n):t.on(e,n);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function r(i){o.once&&t.removeEventListener(e,r),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(t){if("number"!=typeof t||t<0||r(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");s=t}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||r(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var l=i[t];if(void 0===l)return!1;if("function"==typeof l)o(l,this,e);else{var c=l.length,A=d(l,c);for(n=0;n<c;++n)o(A[n],this,e)}return!0},i.prototype.addListener=function(t,e){return c(this,t,e,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(t,e){return c(this,t,e,!0)},i.prototype.once=function(t,e){return a(e),this.on(t,u(this,t,e)),this},i.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,u(this,t,e)),this},i.prototype.removeListener=function(t,e){var n,o,r,i,s;if(a(e),void 0===(o=this._events))return this;if(void 0===(n=o[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete o[t],o.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===e||n[i].listener===e){s=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,r),1===n.length&&(o[t]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",t,s||e)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(t){var e,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var r,i=Object.keys(n);for(o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(o=e.length-1;o>=0;o--)this.removeListener(t,e[o]);return this},i.prototype.listeners=function(t){return h(this,t,!0)},i.prototype.rawListeners=function(t){return h(this,t,!1)},i.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},s=[],a=0;a<t.length;a++){var l=t[a],c=o.base?l[0]+o.base:l[0],A=i[c]||0,u="".concat(c," ").concat(A);i[c]=A+1;var h=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var d=r(p,o);o.byIndex=a,e.splice(a,0,{identifier:u,updater:d,references:1})}s.push(u)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var l=o(t,r),c=0;c<i.length;c++){var A=n(i[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=l}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),o=n(795),r=n.n(o),i=n(569),s=n.n(i),a=n(565),l=n.n(a),c=n(216),A=n.n(c),u=n(589),h=n.n(u),p=n(28),d={};d.styleTagTransform=h(),d.setAttributes=l(),d.insert=s().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=A(),e()(p.Z,d),p.Z&&p.Z.locals&&p.Z.locals,n(187);class f{constructor(t,e,n){this.shipLength=t,this.position=e,this.hits=Array(t).fill(!1),this.orientation=n}isSunk(){return!!this.hits.every((t=>t))}hitShip(t){this.hits[t]=!0}isHit(t){return!!this.hits[t]}rotate(){"horizontal"===this.orientation?this.orientation="vertical":this.orientation="horizontal"}}class C{constructor(t){this.boardSize=t,this.board=this.createBoard(t),this.ships=[]}createBoard(t){let e=[];for(let n=0;n<t;n++){let n=[];for(let e=0;e<t;e++)n.push(null);e.push(n)}return e}renderGameboard(t,e){for(let n=0;n<e.length;n++){const o=document.createElement("div");o.classList.add("row");for(let r=0;r<e[n].length;r++){const i=document.createElement("div");i.classList.add("square"),t.classList.contains("playerBoard")?i.classList.add("humanSquare"):t.classList.contains("cpuBoard")&&i.classList.add("cpuSquare"),e[n][r]instanceof f&&(i.textContent="S",i.classList.add("ship")),i.setAttribute("data-row",n),i.setAttribute("data-col",r),o.appendChild(i)}t.appendChild(o)}}addShip(t){if(!0===this.isShipOverlap(t)||!1===this.isShipInBounds(t))return!1;this.ships.push(t);const e=t.position.row,n=t.position.col;if("horizontal"===t.orientation)for(let o=0;o<t.shipLength;o++)this.board[e][n+o]=t;else for(let o=0;o<t.shipLength;o++)this.board[e+o][n]=t;return!0}isShipInBounds(t){if("horizontal"===t.orientation){const e=t.position.col,n=e+t.shipLength-1;if(e<0||n>this.boardSize-1)return console.log("ship out of bounds"),!1}else{const e=t.position.row,n=e+t.shipLength-1;if(e<0||n>this.boardSize-1)return console.log("ship out of bounds"),!1}return!0}isShipOverlap(t){for(let e=0;e<this.ships.length;e++){let n=this.ships[e];if("horizontal"===t.position.orientation){if(t.position.row===n.position.row&&t.position.col+e>=n.position.col&&t.position.col+e<=n.position.col+n.shipLength-1)return console.log("overlap true"),!0}else if(t.position.col===n.position.col&&t.position.row+e>=n.position.row&&t.position.row+e<=n.position.row+n.shipLength-1)return!0}return!1}receiveAttack(t,e){if(null===this.board[t][e])return this.board[t][e]=!0,!1;{const n=this.board[t][e];return"horizontal"===n.orientation?n.hitShip(e-n.position.col):n.hitShip(t-n.position.row),this.board[t][e]=!0,!0}}allShipsSunk(){return this.ships.every((t=>t.isSunk()))}numberOfShips(){const t=this.ships.length,e=this.ships.filter((t=>t.hits.every((t=>!0===t)))).length;return t-e>0?t-e:0}}class v{constructor(t,e,n=!1){this.name=t,this.gameboard=e,this.turn=n}isTurn(){return!!this.turn}changeTurn(){this.turn?this.turn=!1:this.turn=!0}placeShip(t,e,n){const o=new f(t.shipLength,e,n);return this.gameboard.addShip(o)}receiveAttack(t,e){return this.gameboard.receiveAttack(t,e)}attackRandomSpot(){const t=[];for(let e=0;e<this.gameboard.boardSize;e++)for(let n=0;n<this.gameboard.boardSize;n++){const o=this.gameboard.board[e][n];(null===o||o instanceof f&&!o.isHit(e,n))&&t.push({row:e,col:n})}if(0===t.length)return!1;const e=Math.floor(Math.random()*t.length),n=function(){const n=t[e],o=document.querySelector(`.humanSquare[data-row="${n.row}"][data-col="${n.col}"]`);return o&&(o.textContent="X"),n}();return this.gameboard.receiveAttack(n.row,n.col),!0}shipCounter(){const t=document.querySelector(".playerShips"),e=document.querySelector(".cpuShips");"Human"===this.name?t.textContent=`Player Ships Remaining: ${this.gameboard.numberOfShips()}`:"CPU"===this.name&&(e.textContent=`CPU Ships Remaining: ${this.gameboard.numberOfShips()}`)}hasLost(){return this.gameboard.allShipsSunk()}}!function(){let t=new C(10),e=new v("Human",t),n=new C(10),o=new v("CPU",n);!function(){const t=new f(2,[5,6],"vertical");e.placeShip(t,{row:4,col:2},"vertical");const n=new f(2,[5,6],"vertical");e.placeShip(n,{row:0,col:5},"vertical");const o=new f(3,[1,2,3],"horizontal");e.placeShip(o,{row:0,col:0},"horizontal");const r=new f(3,[8,9,10],"horizontal");e.placeShip(r,{row:2,col:7},"horizontal");const i=new f(4,[47,57,67,77],"vertical");e.placeShip(i,{row:4,col:7},"vertical");const s=new f(5,[15,25,35,45,55],"horizontal");e.placeShip(s,{row:8,col:1},"horizontal")}(),function(){const t=new f(2,[28,38],"vertical");o.placeShip(t,{row:3,col:9},"vertical");const e=new f(3,[46,47,48],"horizontal");o.placeShip(e,{row:4,col:1},"horizontal");const n=new f(3,[25,26,27],"horizontal");o.placeShip(n,{row:7,col:4},"horizontal");const r=new f(4,[18,28,38,48],"vertical");o.placeShip(r,{row:0,col:6},"vertical");const i=new f(5,[32,42,52,62,72],"horizontal");o.placeShip(i,{row:2,col:0},"horizontal");const s=new f(2,[28,38],"horizontal");o.placeShip(s,{row:9,col:7},"horizontal")}(),e.shipCounter(),o.shipCounter();const r=document.querySelector(".gameboard.playerBoard"),i=document.querySelector(".gameboard.cpuBoard");e.gameboard.renderGameboard(r,e.gameboard.board),o.gameboard.renderGameboard(i,o.gameboard.board),e.changeTurn(),document.querySelectorAll(".cpuSquare").forEach((t=>{t.addEventListener("click",(()=>{!function(){const n=t.dataset.row,r=t.dataset.col;console.log(e.turn),e.turn&&"X"!==t.textContent&&(t.textContent="X",o.receiveAttack(n,r),o.shipCounter(),e.changeTurn(),o.hasLost()?alert("Player has won!"):e.hasLost()&&alert("CPU has won!"),e.attackRandomSpot(),e.shipCounter(),e.changeTurn())}()}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,